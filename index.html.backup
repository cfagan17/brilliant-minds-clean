<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Brilliant Minds - Discussion Arena</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
            color: #2c3e50;
        }
        
        .container {
            background: white;
            max-width: 1200px;
            margin: 0 auto;
            border-radius: 24px;
            box-shadow: 0 32px 80px rgba(0,0,0,0.12), 0 8px 32px rgba(0,0,0,0.06);
            overflow: hidden;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 48px 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 100%);
            opacity: 0.5;
        }
        
        .header * {
            position: relative;
            z-index: 1;
        }
        
        h1 {
            font-size: 3.2rem;
            font-weight: 800;
            margin-bottom: 16px;
            text-shadow: 0 4px 12px rgba(0,0,0,0.15);
            letter-spacing: -0.02em;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            font-weight: 300;
        }
        
        .nav-links {
            position: absolute;
            top: 20px;
            right: 30px;
            z-index: 2;
        }
        
        .nav-links a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            opacity: 0.9;
            transition: opacity 0.3s ease;
            margin-left: 20px;
        }
        
        .nav-links a:hover {
            opacity: 1;
            text-decoration: underline;
        }
        
        .content {
            padding: 48px;
        }
        
        .setup-section {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            border: 1px solid #e9ecef;
        }
        
        .setup-section h3 {
            color: #2c3e50;
            margin-bottom: 25px;
            font-size: 1.5rem;
            text-align: center;
        }
        
        .figures-setup {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 25px;
        }
        
        .figure-selection {
            background: white;
            padding: 32px;
            border-radius: 20px;
            box-shadow: 0 16px 40px rgba(0,0,0,0.06), 0 4px 16px rgba(0,0,0,0.04);
            border: 2px solid #f8f9fa;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .figure-selection:hover {
            transform: translateY(-8px);
            box-shadow: 0 24px 60px rgba(0,0,0,0.12), 0 8px 24px rgba(0,0,0,0.08);
            border-color: #e9ecef;
        }
        
        .figure-1 {
            border-left: 4px solid #667eea;
        }
        
        .figure-2 {
            border-left: 4px solid #764ba2;
        }
        
        .figure-selection h4 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.2rem;
            text-align: center;
        }
        
        .figure-selection label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }
        
        /* Toggle buttons for selection mode */
        .selection-mode {
            display: flex;
            background: #f8f9fa;
            border-radius: 12px;
            padding: 4px;
            margin-bottom: 15px;
            border: 1px solid #e9ecef;
        }
        
        .mode-button {
            flex: 1;
            padding: 12px 16px;
            border: none;
            background: transparent;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.3s ease;
            color: #6c757d;
        }
        
        .mode-button.active {
            background: white;
            color: #495057;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .mode-button:hover:not(.active) {
            color: #495057;
        }
        
        select {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 500;
            background: white;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.08);
        }
        
        .custom-input {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 500;
            background: white;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: none;
        }
        
        .custom-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.08);
        }
        
        .custom-input::placeholder {
            color: #6c757d;
            font-style: italic;
        }
        
        .suggestion-box {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 12px;
            margin-top: 8px;
            font-size: 13px;
            color: #6c757d;
            line-height: 1.4;
        }
        
        .suggestion-box strong {
            color: #495057;
            display: block;
            margin-bottom: 6px;
        }
        
        optgroup {
            font-weight: bold;
            color: #495057;
            padding: 8px 0;
        }
        
        option {
            font-weight: normal;
            padding: 8px 12px;
        }
        
        .participants-display {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 25px;
            text-align: center;
            color: white;
            display: none;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }
        
        .participant {
            display: inline-block;
            margin: 0 15px;
            padding: 12px 25px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 1.1rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transition: transform 0.3s ease;
        }
        
        .participant:hover {
            transform: scale(1.05);
        }
        
        .participant-1 {
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
        }
        
        .participant-2 {
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
        }
        
        .question-input-section {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border-radius: 20px;
            padding: 30px;
            margin: 25px 0;
            display: none;
            border: 1px solid #2196F3;
        }
        
        .question-input-section h4 {
            color: #1565C0;
            margin-bottom: 20px;
            font-size: 1.3rem;
            text-align: center;
        }
        
        textarea {
            width: 100%;
            padding: 16px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 16px;
            font-family: inherit;
            resize: vertical;
            min-height: 100px;
            transition: all 0.3s ease;
        }
        
        textarea:focus {
            outline: none;
            border-color: #2196F3;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }
        
        .discussion-arena {
            border: 2px solid #f1f3f5;
            border-radius: 24px;
            padding: 40px;
            min-height: 500px;
            margin-bottom: 32px;
            background: linear-gradient(135deg, #fafbfc 0%, #f8f9fa 100%);
            overflow-y: auto;
            max-height: none;
            display: none;
        }
        
        .discussion-round {
            margin-bottom: 40px;
            padding: 32px;
            border-radius: 20px;
            background: white;
            box-shadow: 0 12px 32px rgba(0,0,0,0.06), 0 4px 16px rgba(0,0,0,0.04);
            border-left: 6px solid #667eea;
            max-height: none;
            overflow: visible;
        }
        
        .question-header {
            font-weight: 700;
            font-size: 1.3rem;
            margin-bottom: 20px;
            text-align: center;
            padding: 20px;
            border-radius: 12px;
            background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
            color: #2e7d32;
            border: 2px solid #4caf50;
            max-height: none;
            height: auto;
            overflow: visible;
        }
        
        .speaker {
            margin: 24px 0;
            padding: 24px;
            border-radius: 16px;
            border-left: 5px solid;
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 24px rgba(0,0,0,0.04);
            word-wrap: break-word;
            overflow-wrap: break-word;
            min-height: auto;
            max-height: none;
            overflow: visible;
        }
        
        .speaker:hover {
            transform: translateX(8px);
        }
        
        .speaker-content {
            line-height: 1.7;
            color: #2c3e50;
        }
        
        .speaker-content p {
            margin: 16px 0;
            line-height: 1.7;
        }
        
        .speaker-content p:first-child {
            margin-top: 0;
        }
        
        .speaker-content p:last-child {
            margin-bottom: 0;
        }
        
        .figure-1-speaker {
            border-left-color: #667eea;
            background: linear-gradient(135deg, #e3f2fd 0%, #e1f5fe 100%);
            max-height: none;
            height: auto;
            overflow: visible;
        }
        
        .figure-2-speaker {
            border-left-color: #764ba2;
            background: linear-gradient(135deg, #f3e5f5 0%, #fce4ec 100%);
            max-height: none;
            height: auto;
            overflow: visible;
        }
        
        .moderator-speaker {
            border-left-color: #ff9800;
            background: linear-gradient(135deg, #fff8f0 0%, #fff3e0 100%);
            min-height: auto;
            overflow: visible;
            max-height: none;
            height: auto;
        }
        
        .moderator-content {
            line-height: 1.7;
            max-height: none;
            overflow: visible;
            height: auto;
        }
        
        .moderator-content h4 {
            font-weight: 700;
            font-size: 1.1rem;
            color: #e65100;
            margin: 20px 0 12px 0;
            padding-bottom: 8px;
            border-bottom: 2px solid #ffcc02;
            display: block;
            max-height: none;
            height: auto;
            overflow: visible;
        }
        
        .moderator-content h4:first-child {
            margin-top: 0;
        }
        
        .moderator-content p {
            margin: 12px 0;
            color: #424242;
            font-size: 15px;
        }
        
        .moderator-content ul, .moderator-content ol {
            margin: 12px 0;
            padding-left: 24px;
        }
        
        .moderator-content li {
            margin: 8px 0;
            color: #424242;
        }
        
        .speaker-name {
            font-weight: 700;
            margin-bottom: 12px;
            font-size: 1.1rem;
            color: #2c3e50;
        }
        
        .extended-separator {
            margin: 25px 0;
            padding: 15px;
            background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
            border-radius: 10px;
            text-align: center;
            font-weight: 700;
            color: #1976D2;
            border: 2px dashed #2196F3;
        }
        
        .controls {
            text-align: center;
            margin: 25px 0;
        }
        
        button {
            padding: 16px 32px;
            font-size: 16px;
            font-weight: 600;
            border: none;
            border-radius: 16px;
            cursor: pointer;
            margin: 0 8px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 24px rgba(0,0,0,0.08), 0 4px 12px rgba(0,0,0,0.04);
            position: relative;
            overflow: hidden;
            letter-spacing: 0.01em;
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        button:hover::before {
            left: 100%;
        }
        
        button:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 40px rgba(0,0,0,0.12), 0 8px 24px rgba(0,0,0,0.08);
        }
        
        button:active {
            transform: translateY(-2px);
        }
        
        button:disabled {
            background-color: #ccc !important;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .start-button {
            background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
            color: white;
            font-size: 18px;
            padding: 18px 40px;
        }
        
        .ask-button {
            background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
            color: white;
        }
        
        .continue-button {
            background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
            color: white;
        }
        
        .secondary-button {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            color: white;
        }
        
        /* Loading animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .header {
                padding: 30px 20px;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .content {
                padding: 20px;
            }
            
            .figures-setup {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .participant {
                display: block;
                margin: 10px 0;
            }
            
            button {
                display: block;
                width: 100%;
                margin: 8px 0;
            }
        }
        
        /* Success message */
        .success-message {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            color: #155724;
            padding: 15px 20px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #28a745;
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.15);
        }
        
        /* Direct chat section styles */
        .direct-chat-section {
            margin-top: 40px;
            padding: 0 48px 48px 48px;
        }
        
        .direct-chat-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 24px;
            padding: 40px;
            text-align: center;
            border: 2px solid #e9ecef;
            box-shadow: 0 12px 32px rgba(0,0,0,0.06);
        }
        
        .direct-chat-card h3 {
            color: #2c3e50;
            margin-bottom: 16px;
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .direct-chat-card p {
            color: #495057;
            margin-bottom: 32px;
            font-size: 1.1rem;
            line-height: 1.6;
        }
        
        .figure-buttons {
            display: flex;
            gap: 16px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .figure-chat-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 16px 32px;
            border-radius: 16px;
            border: none;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 24px rgba(102, 126, 234, 0.2);
            margin: 8px;
        }
        
        .figure-chat-button:hover {
            transform: translateY(-4px);
            box-shadow: 0 16px 40px rgba(102, 126, 234, 0.3);
        }
        
        @media (max-width: 768px) {
            .direct-chat-section {
                padding: 0 20px 20px 20px;
            }
            
            .direct-chat-card {
                padding: 24px;
            }
            
            .figure-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .figure-chat-button {
                width: 100%;
                max-width: 280px;
            }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Pulse animation for important buttons */
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); }
            50% { box-shadow: 0 4px 25px rgba(102, 126, 234, 0.6); }
            100% { box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="nav-links">
                <a href="chat.html">💬 Personal Chat</a>
            </div>
            <h1>�� Brilliant Minds</h1>
            <p class="subtitle">Watch brilliant minds explore ideas together through thoughtful conversation</p>
        </div>
        
        <div class="content">
            <!-- Discussion Setup -->
            <div class="setup-section fade-in" id="setupSection">
                <h3>🎭 Choose Your Discussion Participants</h3>
                
                <div class="figures-setup">
                    <div style="grid-column: 1 / -1; margin-bottom: 20px;">
        <div style="background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%); padding: 20px; border-radius: 15px; border-left: 4px solid #4CAF50;">
            <h4 style="color: #2e7d32; margin-bottom: 12px;">💡 Try These Fascinating Discussions:</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; font-size: 14px;">
                <div>"What is the meaning of life?" <br><em>Socrates vs Einstein</em></div>
                <div>"How should we approach AI development?" <br><em>Turing vs Musk</em></div>
                <div>"What makes great leadership?" <br><em>Lincoln vs Churchill</em></div>
                <div>"Is free will real?" <br><em>Kant vs Hawking</em></div>
                <div>"What is the nature of consciousness?" <br><em>Penrose vs Descartes</em></div>
                <div>"How do we create a just society?" <br><em>Plato vs Jefferson</em></div>
            </div>
        </div>
    </div>

                    <div class="figure-selection figure-1">
                        <h4>🎤 First Speaker</h4>
                        
                        <!-- Selection Mode Toggle -->
                        <div class="selection-mode">
                            <button type="button" class="mode-button active" onclick="toggleMode(1, 'preset')">📋 Preset Figures</button>
                            <button type="button" class="mode-button" onclick="toggleMode(1, 'custom')">✏️ Write Your Own</button>
                        </div>
                        
                        <label>Brilliant Figure:</label>
                        <select id="figure1" class="preset-select">
                             <optgroup label="🤔 Philosophers">
                                <option value="aristotle" selected="selected">Aristotle</option>
                                <option value="socrates">Socrates</option>
                                <option value="plato">Plato</option>
                                <option value="confucius">Confucius</option>
                                <option value="kant">Immanuel Kant</option>
                                <option value="nietzsche">Friedrich Nietzsche</option>
                            </optgroup>
                            <optgroup label="🔬 Scientists & Mathematicians">
                                <option value="einstein">Albert Einstein</option>
                                <option value="newton">Isaac Newton</option>
                                <option value="darwin">Charles Darwin</option>
                                <option value="curie">Marie Curie</option>
                                <option value="galileo">Galileo Galilei</option>
                                <option value="hawking">Stephen Hawking</option>
                                <option value="feynman">Richard Feynman</option>
                                <option value="tesla">Nikola Tesla</option>
                                <option value="pasteur">Louis Pasteur</option>
                                <option value="watson">James Watson</option>
                                <option value="turing">Alan Turing</option>
                            </optgroup>
                            <optgroup label="🖥️ Logic, Mathematics & Computing Pioneers">
                                <option value="frege">Gottlob Frege</option>
                                <option value="russell">Bertrand Russell</option>
                                <option value="hilbert">David Hilbert</option>
                                <option value="vonneumann">John von Neumann</option>
                                <option value="godel">Kurt Gödel</option>
                                <option value="shannon">Claude Shannon</option>
                                <option value="church_historical">Alonzo Church</option>
                                <option value="babbage">Charles Babbage</option>
                                <option value="lovelace">Ada Lovelace</option>
                            </optgroup>
                            <optgroup label="🧬 Contemporary Scientists & Thinkers">
                                <option value="penrose">Roger Penrose</option>
                                <option value="witten">Edward Witten</option>
                                <option value="venter">Craig Venter</option>
                                <option value="tao">Terence Tao</option>
                                <option value="yau">Shing-Tung Yau</option>
                                <option value="church">Alonzo Church</option>
                                <option value="kahneman">Daniel Kahneman</option>
                                <option value="wilson">Edward O. Wilson</option>
                                <option value="chomsky">Noam Chomsky</option>
                                <option value="pinker">Steven Pinker</option>
                                <option value="harari">Yuval Noah Harari</option>
                                <option value="tegmark">Max Tegmark</option>
                            </optgroup>
                            <optgroup label="👑 Leaders & Statesmen">
                                <option value="lincoln">Abraham Lincoln</option>
                                <option value="churchill">Winston Churchill</option>
                                <option value="gandhi">Mahatma Gandhi</option>
                                <option value="jefferson">Thomas Jefferson</option>
                                <option value="cleopatra">Cleopatra</option>
                                <option value="mandela">Nelson Mandela</option>
                            </optgroup>
                            <optgroup label="🎨 Artists & Writers">
                                <option value="shakespeare">William Shakespeare</option>
                                <option value="leonardo">Leonardo da Vinci</option>
                                <option value="michelangelo">Michelangelo</option>
                                <option value="beethoven">Ludwig van Beethoven</option>
                            </optgroup>
                            <optgroup label="💰 Economic & Social Thinkers">
                                <option value="smith">Adam Smith</option>
                                <option value="marx">Karl Marx</option>
                                <option value="keynes">John Maynard Keynes</option>
                                <option value="friedman">Milton Friedman</option>
                            </optgroup>
                            <optgroup label="💼 Contemporary Leaders & Innovators">
                                <option value="gates">Bill Gates</option>
                                <option value="musk">Elon Musk</option>
                                <option value="bezos">Jeff Bezos</option>
                                <option value="jobs">Steve Jobs</option>
                                <option value="buffett">Warren Buffett</option>
                                <option value="branson">Richard Branson</option>
                            </optgroup>
                        </select>
                        
                        <input type="text" id="figure1Custom" class="custom-input" placeholder="Enter any name (e.g., Taylor Swift, Napoleon, Frida Kahlo, your grandmother...)">
                        
                        <div class="suggestion-box" id="suggestion1" style="display: none;">
                            <strong>💡 Custom Figure Tips:</strong>
                            Try historical figures, celebrities, fictional characters, or even people you know! The AI will research and embody their personality, knowledge, and speaking style.
                        </div>
                    </div>
                    
                    <div class="figure-selection figure-2">
                        <h4>🎯 Second Speaker</h4>
                        
                        <!-- Selection Mode Toggle -->
                        <div class="selection-mode">
                            <button type="button" class="mode-button active" onclick="toggleMode(2, 'preset')">📋 Preset Figures</button>
                            <button type="button" class="mode-button" onclick="toggleMode(2, 'custom')">✏️ Write Your Own</button>
                        </div>
                        
                        <label>Brilliant Figure:</label>
                        <select id="figure2" class="preset-select">
                             <optgroup label="🤔 Philosophers">
                                <option value="aristotle">Aristotle</option>
                                <option value="socrates" selected="selected">Socrates</option>
                                <option value="plato">Plato</option>
                                <option value="confucius">Confucius</option>
                                <option value="kant">Immanuel Kant</option>
                                <option value="nietzsche">Friedrich Nietzsche</option>
                            </optgroup>
                            <optgroup label="🔬 Scientists & Mathematicians">
                                <option value="einstein">Albert Einstein</option>
                                <option value="newton">Isaac Newton</option>
                                <option value="darwin">Charles Darwin</option>
                                <option value="curie">Marie Curie</option>
                                <option value="galileo">Galileo Galilei</option>
                                <option value="hawking">Stephen Hawking</option>
                                <option value="feynman">Richard Feynman</option>
                                <option value="tesla">Nikola Tesla</option>
                                <option value="pasteur">Louis Pasteur</option>
                                <option value="watson">James Watson</option>
                                <option value="turing">Alan Turing</option>
                            </optgroup>
                            <optgroup label="🖥️ Logic, Mathematics & Computing Pioneers">
                                <option value="frege">Gottlob Frege</option>
                                <option value="russell">Bertrand Russell</option>
                                <option value="hilbert">David Hilbert</option>
                                <option value="vonneumann">John von Neumann</option>
                                <option value="godel">Kurt Gödel</option>
                                <option value="shannon">Claude Shannon</option>
                                <option value="church_historical">Alonzo Church</option>
                                <option value="babbage">Charles Babbage</option>
                                <option value="lovelace">Ada Lovelace</option>
                            </optgroup>
                            <optgroup label="🧬 Contemporary Scientists & Thinkers">
                                <option value="penrose">Roger Penrose</option>
                                <option value="witten">Edward Witten</option>
                                <option value="venter">Craig Venter</option>
                                <option value="tao">Terence Tao</option>
                                <option value="yau">Shing-Tung Yau</option>
                                <option value="church">Alonzo Church</option>
                                <option value="kahneman">Daniel Kahneman</option>
                                <option value="wilson">Edward O. Wilson</option>
                                <option value="chomsky">Noam Chomsky</option>
                                <option value="pinker">Steven Pinker</option>
                                <option value="harari">Yuval Noah Harari</option>
                                <option value="tegmark">Max Tegmark</option>
                            </optgroup>
                            <optgroup label="👑 Leaders & Statesmen">
                                <option value="lincoln">Abraham Lincoln</option>
                                <option value="churchill">Winston Churchill</option>
                                <option value="gandhi">Mahatma Gandhi</option>
                                <option value="jefferson">Thomas Jefferson</option>
                                <option value="cleopatra">Cleopatra</option>
                                <option value="mandela">Nelson Mandela</option>
                            </optgroup>
                            <optgroup label="🎨 Artists & Writers">
                                <option value="shakespeare">William Shakespeare</option>
                                <option value="leonardo">Leonardo da Vinci</option>
                                <option value="michelangelo">Michelangelo</option>
                                <option value="beethoven">Ludwig van Beethoven</option>
                            </optgroup>
                            <optgroup label="💰 Economic & Social Thinkers">
                                <option value="smith">Adam Smith</option>
                                <option value="marx">Karl Marx</option>
                                <option value="keynes">John Maynard Keynes</option>
                                <option value="friedman">Milton Friedman</option>
                            </optgroup>
                            <optgroup label="💼 Contemporary Leaders & Innovators">
                                <option value="gates">Bill Gates</option>
                                <option value="musk">Elon Musk</option>
                                <option value="bezos">Jeff Bezos</option>
                                <option value="jobs">Steve Jobs</option>
                                <option value="buffett">Warren Buffett</option>
                                <option value="branson">Richard Branson</option>
                            </optgroup>
                        </select>
                        
                        <input type="text" id="figure2Custom" class="custom-input" placeholder="Enter any name (e.g., Marie Antoinette, Carl Sagan, Maya Angelou...)">
                        
                        <div class="suggestion-box" id="suggestion2" style="display: none;">
                            <strong>�� Custom Figure Tips:</strong>
                            Try historical figures, celebrities, fictional characters, or even people you know! The AI will research and embody their personality, knowledge, and speaking style.
                        </div>
                    </div>
                </div>
                
                <div class="controls">
                    <button class="start-button pulse" onclick="startDiscussion()">✨ Start Discussion</button>
                </div>
            </div>
            
            <!-- Participants Display -->
            <div class="participants-display fade-in" id="participantsDisplay">
                <h3 style="margin-bottom: 20px;">Today's Conversation Partners</h3>
                <div class="participant participant-1" id="participant1Name"></div>
                <span style="font-size: 30px; margin: 0 20px;">🤝</span>
                <div class="participant participant-2" id="participant2Name"></div>
            </div>
            
            <!-- Question Input -->
            <div class="question-input-section fade-in" id="questionSection">
                <h4>💬 What would you like them to discuss?</h4>
                <textarea id="questionInput" placeholder="Enter your question here... (e.g., 'What is the meaning of life?', 'How should society be organized?', 'What is the role of art in society?', 'Is free will real?')"></textarea>
                <div class="controls">
                    <button class="ask-button" onclick="askQuestion()">🚀 Start the Discussion</button>
                </div>
            </div>
            
            <!-- Discussion Arena -->
            <div class="discussion-arena fade-in" id="discussionArena">
                <!-- Discussion content will be added here -->
            </div>
            
            <div class="controls" id="discussionControls" style="display: none;">
                <button class="continue-button" onclick="continueDiscussion()" id="continueButton">🔄 Continue Discussion</button>
                <button class="ask-button" onclick="showQuestionInput()">💭 Ask Another Question</button>
                <button class="secondary-button" onclick="resetDiscussion()">🆕 New Discussion</button>
            </div>
            
            <!-- Direct Chat Option -->
            <div class="direct-chat-section" id="directChatSection" style="display: none;">
                <div class="direct-chat-card">
                    <h3>💬 Want to chat directly with one of these figures?</h3>
                    <p>Choose a figure from the discussion above to have a personal conversation with them.</p>
                    <div class="figure-buttons" id="figureButtons">
                        <!-- Buttons will be populated by JavaScript -->
                    </div>
                    <p style="font-size: 14px; color: #6c757d; margin-top: 16px;">
                        Or explore our <a href="chat.html" style="color: #667eea; text-decoration: none; font-weight: 600;">full chat interface</a> with all brilliant figures.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let discussionState = {
            figure1: null,
            figure2: null,
            currentQuestion: '',
            isExtended: false,
            currentContainer: null,
            figure1Mode: 'preset',
            figure2Mode: 'preset'
        };

        // Toggle between preset and custom input modes
        function toggleMode(figureNum, mode) {
            discussionState[`figure${figureNum}Mode`] = mode;
            
            const presetSelect = document.getElementById(`figure${figureNum}`);
            const customInput = document.getElementById(`figure${figureNum}Custom`);
            const suggestionBox = document.getElementById(`suggestion${figureNum}`);
            const modeButtons = document.querySelectorAll(`.figure-selection:nth-child(${figureNum + 1}) .mode-button`);
            
            // Update button states
            modeButtons.forEach((btn, index) => {
                if ((index === 0 && mode === 'preset') || (index === 1 && mode === 'custom')) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
            
            // Show/hide appropriate input
            if (mode === 'preset') {
                presetSelect.style.display = 'block';
                customInput.style.display = 'none';
                suggestionBox.style.display = 'none';
            } else {
                presetSelect.style.display = 'none';
                customInput.style.display = 'block';
                suggestionBox.style.display = 'block';
                customInput.focus();
            }
        }

        // Create custom figure object from name
        function createCustomFigure(name) {
            return {
                name: name,
                prompt: `You are ${name}. Embody their personality, knowledge, speaking style, and perspective as accurately as possible. If this is a real person, draw on their known views, experiences, and way of communicating. If this is a fictional character, embody their personality from their source material. If this is someone the user knows personally, ask clarifying questions if needed, but generally respond as a thoughtful, intelligent person with that name would. Stay in character throughout the conversation and bring their unique perspective to the discussion.`
            };
        }

        // Enhanced brilliant figures with scientists and thought leaders
        const figures = {
            // Philosophers
            socrates: {
                name: "Socrates",
                prompt: "You are Socrates. Use the Socratic method - ask probing questions to examine beliefs. Be humble about your own knowledge ('I know that I know nothing'). Challenge assumptions and seek truth through questioning."
            },
            aristotle: {
                name: "Aristotle",
                prompt: "You are Aristotle. Speak as a systematic philosopher and logician. Use logical reasoning and categorical thinking. Reference your teachings on ethics, politics, and human nature."
            },
            plato: {
                name: "Plato",
                prompt: "You are Plato. Speak about ideals, truth, and the nature of reality. Reference your theory of Forms and beliefs about justice and the ideal state. Use allegories and philosophical reasoning."
            },
            confucius: {
                name: "Confucius",
                prompt: "You are Confucius. Speak with wisdom about social harmony, virtue, and proper relationships. Reference the importance of education, family, and moral cultivation. Use thoughtful aphorisms."
            },
            kant: {
                name: "Immanuel Kant",
                prompt: "You are Immanuel Kant. Speak about duty, categorical imperatives, and moral philosophy. Reference the limits of reason and the importance of moral law. Be systematic and precise in your thinking."
            },
            nietzsche: {
                name: "Friedrich Nietzsche",
                prompt: "You are Friedrich Nietzsche. Speak provocatively about the will to power, the übermensch, and questioning traditional values. Challenge conventional morality and advocate for individual strength and creativity."
            },
            
            // Scientists & Mathematicians
            einstein: {
                name: "Albert Einstein",
                prompt: "You are Albert Einstein. Respond with scientific curiosity, wisdom, and humanitarian concerns. Reference scientific principles when relevant. Show your philosophical side and concern for humanity's future."
            },
            newton: {
                name: "Isaac Newton",
                prompt: "You are Isaac Newton. Speak with mathematical precision and systematic thinking. Reference natural laws, gravity, and the mathematical nature of the universe. Show your methodical approach to understanding nature."
            },
            darwin: {
                name: "Charles Darwin",
                prompt: "You are Charles Darwin. Speak about evolution, natural selection, and careful observation of nature. Show your methodical approach to collecting evidence and drawing conclusions. Reference the interconnectedness of life."
            },
            curie: {
                name: "Marie Curie",
                prompt: "You are Marie Curie. Speak with dedication to scientific research and discovery. Reference your work with radioactivity and your perseverance in a male-dominated field. Show passion for knowledge and scientific advancement."
            },
            galileo: {
                name: "Galileo Galilei",
                prompt: "You are Galileo Galilei. Speak about observation, experimentation, and challenging established beliefs. Reference your telescopic discoveries and your conflict with traditional authority. Advocate for empirical evidence."
            },
            hawking: {
                name: "Stephen Hawking",
                prompt: "You are Stephen Hawking. Speak about black holes, the nature of time, and the universe. Make complex physics accessible. Show your wit and determination to understand the cosmos despite physical limitations."
            },
            feynman: {
                name: "Richard Feynman",
                prompt: "You are Richard Feynman. Speak with curiosity and explain complex physics simply. Use analogies and everyday examples. Show your love of learning and teaching. Be playful yet profound in your insights."
            },
            tesla: {
                name: "Nikola Tesla",
                prompt: "You are Nikola Tesla. Speak about electricity, invention, and the future of technology. Show your visionary thinking and dedication to advancing human civilization through science and engineering."
            },
            pasteur: {
                name: "Louis Pasteur",
                prompt: "You are Louis Pasteur. Speak about the scientific method, germ theory, and the importance of careful experimentation. Show your dedication to improving human health through scientific discovery."
            },
            watson: {
                name: "James Watson",
                prompt: "You are James Watson. Speak about DNA, genetics, and molecular biology. Reference the structure of DNA and the importance of scientific collaboration. Show your passion for understanding life at the molecular level."
            },
            turing: {
                name: "Alan Turing",
                prompt: "You are Alan Turing. Speak about computation, artificial intelligence, and mathematical logic. Reference your work on breaking codes, the theoretical foundations of computer science, and the Turing test for machine intelligence."
            },
            
            // Logic, Mathematics & Computing Pioneers
            frege: {
                name: "Gottlob Frege",
                prompt: "You are Gottlob Frege. Speak about mathematical logic, the foundations of arithmetic, and formal systems. Reference your work on predicate logic and the logical foundations of mathematics. Discuss sense and reference in language and logic."
            },
            russell: {
                name: "Bertrand Russell",
                prompt: "You are Bertrand Russell. Speak about mathematical logic, philosophy of mathematics, and analytic philosophy. Reference Russell's Paradox, logical atomism, and your work with Whitehead on Principia Mathematica. Discuss the relationship between logic and reality."
            },
            hilbert: {
                name: "David Hilbert",
                prompt: "You are David Hilbert. Speak about mathematical formalism, the foundations of geometry, and Hilbert's program. Reference your work on axiomatization and the quest to prove mathematics is complete and consistent. Discuss mathematical rigor and proof theory."
            },
            vonneumann: {
                name: "John von Neumann",
                prompt: "You are John von Neumann. Speak about computer architecture, game theory, and mathematical foundations. Reference the von Neumann architecture, quantum mechanics formalism, and mathematical economics. Discuss the intersection of mathematics and practical applications."
            },
            godel: {
                name: "Kurt Gödel",
                prompt: "You are Kurt Gödel. Speak about mathematical logic, incompleteness theorems, and the limits of formal systems. Reference your proof that mathematics contains undecidable propositions. Discuss the philosophical implications of mathematical incompleteness."
            },
            shannon: {
                name: "Claude Shannon",
                prompt: "You are Claude Shannon. Speak about information theory, digital circuits, and communication systems. Reference your mathematical theory of communication and the concept of information entropy. Discuss how information can be quantified and transmitted."
            },
            church_historical: {
                name: "Alonzo Church",
                prompt: "You are Alonzo Church. Speak about lambda calculus, mathematical logic, and computability theory. Reference Church's thesis on effective calculability and your work on the foundations of computer science. Discuss the relationship between logic and computation."
            },
            babbage: {
                name: "Charles Babbage",
                prompt: "You are Charles Babbage. Speak about mechanical computation, the Analytical Engine, and early computer design. Reference your vision of programmable machines and automatic calculation. Discuss the mechanical foundations of computing."
            },
            lovelace: {
                name: "Ada Lovelace",
                prompt: "You are Ada Lovelace. Speak about programming, mathematical computation, and the potential of computing machines. Reference your work on Babbage's Analytical Engine and your vision of computers beyond mere calculation. Discuss the creative possibilities of computation."
            },
            
            // Leaders & Statesmen
            lincoln: {
                name: "Abraham Lincoln",
                prompt: "You are Abraham Lincoln. Speak with wisdom, humility, and moral clarity. Use folksy anecdotes and simple language to explain complex ideas. Show concern for justice, unity, and human dignity."
            },
            churchill: {
                name: "Winston Churchill",
                prompt: "You are Winston Churchill. Speak with determination, wit, and rhetorical flair. Reference your wartime leadership experience. Use powerful, memorable phrases and show resolve."
            },
            gandhi: {
                name: "Mahatma Gandhi",
                prompt: "You are Mahatma Gandhi. Speak with moral authority, non-violence, and spiritual wisdom. Reference your philosophy of peaceful resistance and social justice. Show compassion and dedication to truth."
            },
            jefferson: {
                name: "Thomas Jefferson",
                prompt: "You are Thomas Jefferson. Speak as an Enlightenment thinker and founding father. Reference democratic ideals, individual liberty, and natural rights. Show your intellectual breadth."
            },
            cleopatra: {
                name: "Cleopatra",
                prompt: "You are Cleopatra VII of Egypt. Speak with intelligence, political acumen, and regal bearing. Reference ancient leadership, politics, and strategy. Show your multilingual education and diplomatic skills."
            },
            mandela: {
                name: "Nelson Mandela",
                prompt: "You are Nelson Mandela. Speak about reconciliation, justice, and peaceful resistance to oppression. Reference your experience with apartheid and your commitment to unity and forgiveness."
            },
            
            // Artists & Writers
            shakespeare: {
                name: "William Shakespeare",
                prompt: "You are William Shakespeare. Speak with eloquence and creativity. Use some Elizabethan flair but keep it understandable. Reference human nature and the human condition. Use metaphors and poetic language."
            },
            leonardo: {
                name: "Leonardo da Vinci",
                prompt: "You are Leonardo da Vinci. Show Renaissance curiosity about everything - art, science, engineering, nature. Connect different fields of knowledge. Be enthusiastic about learning and observation."
            },
            michelangelo: {
                name: "Michelangelo",
                prompt: "You are Michelangelo. Speak passionately about art, sculpture, and the pursuit of perfection. Reference your dedication to capturing divine beauty and human form. Show your artistic intensity and spiritual devotion."
            },
            beethoven: {
                name: "Ludwig van Beethoven",
                prompt: "You are Ludwig van Beethoven. Speak passionately about music, emotion, and artistic expression. Reference how music can convey the deepest human feelings. Show your revolutionary spirit in art."
            },
            
            // Economic & Social Thinkers
            smith: {
                name: "Adam Smith",
                prompt: "You are Adam Smith. Speak about free markets, the invisible hand, and human nature in economic behavior. Reference the importance of self-interest balanced with moral sentiments."
            },
            marx: {
                name: "Karl Marx",
                prompt: "You are Karl Marx. Speak about class struggle, capitalism, and social revolution. Reference the importance of economic structures in shaping society and the need for worker solidarity."
            },
            keynes: {
                name: "John Maynard Keynes",
                prompt: "You are John Maynard Keynes. Speak about economics, government intervention, and managing economic cycles. Reference the importance of demand management and practical economic policy."
            },
            friedman: {
                name: "Milton Friedman",
                prompt: "You are Milton Friedman. Speak about free markets, individual choice, and limited government. Reference the efficiency of market mechanisms and the importance of economic freedom."
            },
            
            // Contemporary Scientists & Thinkers
            penrose: {
                name: "Roger Penrose",
                prompt: "You are Roger Penrose. Speak about mathematical physics, consciousness, and cosmology. Reference your work on black holes, penrose tilings, and quantum theories of consciousness. Discuss the deep mathematical structure of reality."
            },
            witten: {
                name: "Edward Witten",
                prompt: "You are Edward Witten. Speak about string theory, mathematical physics, and the unification of fundamental forces. Reference M-theory and the mathematical elegance underlying physical reality. Discuss topology and quantum field theory."
            },
            venter: {
                name: "Craig Venter",
                prompt: "You are Craig Venter. Speak about genomics, synthetic biology, and the future of life sciences. Reference your work sequencing the human genome and creating synthetic life forms. Discuss personalized medicine and bioengineering."
            },
            tao: {
                name: "Terence Tao",
                prompt: "You are Terence Tao. Speak about pure mathematics, number theory, and harmonic analysis. Reference your work on prime numbers, partial differential equations, and mathematical problem-solving. Discuss the beauty and structure of mathematical truth."
            },
            yau: {
                name: "Shing-Tung Yau",
                prompt: "You are Shing-Tung Yau. Speak about differential geometry, algebraic geometry, and mathematical physics. Reference Calabi-Yau manifolds and your work bridging mathematics and string theory. Discuss the geometric foundations of physical reality."
            },
            church: {
                name: "Alonzo Church",
                prompt: "You are Alonzo Church. Speak about mathematical logic, lambda calculus, and the foundations of computation. Reference Church's thesis and your work on decidability. Discuss the logical structure underlying mathematics and computation."
            },
            kahneman: {
                name: "Daniel Kahneman",
                prompt: "You are Daniel Kahneman. Speak about behavioral economics, cognitive biases, and decision-making. Reference prospect theory and your work on human irrationality. Discuss how psychology impacts economic and personal decisions."
            },
            wilson: {
                name: "Edward O. Wilson",
                prompt: "You are Edward O. Wilson. Speak about sociobiology, biodiversity, and conservation. Reference your work on ant colonies, island biogeography, and the unity of knowledge. Discuss the biological foundations of behavior and environmental protection."
            },
            chomsky: {
                name: "Noam Chomsky",
                prompt: "You are Noam Chomsky. Speak about linguistics, cognitive science, and political criticism. Reference universal grammar and critique media and political power structures. Show deep concern for social justice."
            },
            pinker: {
                name: "Steven Pinker",
                prompt: "You are Steven Pinker. Speak about cognitive psychology, language, and human progress. Reference declining violence and the power of reason and science. Be optimistic about human nature and Enlightenment values."
            },
            harari: {
                name: "Yuval Noah Harari",
                prompt: "You are Yuval Noah Harari. Speak about human history, the future of humanity, and artificial intelligence. Reference cognitive revolution, agricultural revolution, and scientific revolution. Discuss how technology shapes society."
            },
            tegmark: {
                name: "Max Tegmark",
                prompt: "You are Max Tegmark. Speak about artificial intelligence, cosmology, and the mathematical universe hypothesis. Discuss AI safety and the future of intelligence. Reference parallel universes and consciousness."
            },
            
            // Contemporary Leaders & Innovators
            gates: {
                name: "Bill Gates",
                prompt: "You are Bill Gates. Speak about technology, global health, and philanthropy. Reference your Microsoft experience and current focus on solving world problems through innovation and giving. Discuss pandemic preparedness and climate change."
            },
            musk: {
                name: "Elon Musk",
                prompt: "You are Elon Musk. Speak about electric vehicles, space exploration, and artificial intelligence. Reference your work with Tesla, SpaceX, and Neuralink. Be ambitious about humanity's multi-planetary future and sustainable energy."
            },
            bezos: {
                name: "Jeff Bezos",
                prompt: "You are Jeff Bezos. Speak about e-commerce, cloud computing, and space colonization. Reference customer obsession and long-term thinking. Discuss building companies that can scale and your vision for space manufacturing."
            },
            jobs: {
                name: "Steve Jobs",
                prompt: "You are Steve Jobs. Speak about design, innovation, and user experience. Reference the intersection of technology and liberal arts. Emphasize simplicity, perfection, and thinking differently about products."
            },
            buffett: {
                name: "Warren Buffett",
                prompt: "You are Warren Buffett. Speak about value investing, business principles, and long-term thinking. Reference buying great companies at fair prices and the importance of understanding businesses. Use folksy wisdom and analogies."
            },
            branson: {
                name: "Richard Branson",
                prompt: "You are Richard Branson. Speak about entrepreneurship, adventure, and putting employees first. Reference the Virgin brand philosophy and disrupting established industries. Emphasize fun, customer service, and taking calculated risks."
            }
        };
        
        function startDiscussion() { 
            let figure1, figure2;
            
            // Get figure 1
            if (discussionState.figure1Mode === 'preset') {
                const figure1Id = document.getElementById('figure1').value;
                figure1 = figures[figure1Id];
            } else {
                const figure1Name = document.getElementById('figure1Custom').value.trim();
                if (!figure1Name) {
                    alert('Please enter a name for the first speaker!');
                    return;
                }
                figure1 = createCustomFigure(figure1Name);
            }
            
            // Get figure 2
            if (discussionState.figure2Mode === 'preset') {
                const figure2Id = document.getElementById('figure2').value;
                figure2 = figures[figure2Id];
            } else {
                const figure2Name = document.getElementById('figure2Custom').value.trim();
                if (!figure2Name) {
                    alert('Please enter a name for the second speaker!');
                    return;
                }
                figure2 = createCustomFigure(figure2Name);
            }
            
            // Check if same figure selected/entered
            if (figure1.name.toLowerCase() === figure2.name.toLowerCase()) {
                alert('Please select or enter different figures for an interesting discussion!');
                return;
            }
            
            discussionState.figure1 = figure1;
            discussionState.figure2 = figure2;
            
            // Update display
            document.getElementById('participant1Name').textContent = discussionState.figure1.name;
            document.getElementById('participant2Name').textContent = discussionState.figure2.name;
            
            // Show/hide sections with animation
            document.getElementById('setupSection').style.display = 'none';
            document.getElementById('participantsDisplay').style.display = 'block';
            document.getElementById('questionSection').style.display = 'block';
            document.getElementById('discussionArena').style.display = 'block';
            
            // Clear previous discussions
            document.getElementById('discussionArena').innerHTML = '';
        }
        
        async function askQuestion() {
            const question = document.getElementById('questionInput').value.trim();
            if (!question) {
                alert('Please enter a question!');
                return;
            }
            
            discussionState.currentQuestion = question;
            
            // Hide question input
            document.getElementById('questionSection').style.display = 'none';
            document.getElementById('discussionControls').style.display = 'block';
            
            // Create discussion round
            const arena = document.getElementById('discussionArena');
            const roundDiv = document.createElement('div');
            roundDiv.className = 'discussion-round fade-in';
            roundDiv.innerHTML = `<div class="question-header">💭 "${question}"</div>`;
            arena.appendChild(roundDiv);
            
            // Conduct the three-part discussion
            await getInitialResponse(roundDiv);
            await getSecondResponse(roundDiv);
            await getFollowUpResponse(roundDiv);
            await getModerationSummary(roundDiv);
            
            // Store current container for potential continuation
            discussionState.currentContainer = roundDiv;
            discussionState.isExtended = false;
            
            // Show direct chat options
            showDirectChatOptions();
        }
        
        async function getInitialResponse(container) {
            const speakerDiv = document.createElement('div');
            speakerDiv.className = 'speaker figure-1-speaker fade-in';
            speakerDiv.innerHTML = `
                <div class="speaker-name">${discussionState.figure1.name} (Opening Thoughts)</div>
                <div><span class="loading"></span>Thinking...</div>
            `;
            container.appendChild(speakerDiv);
            
            try {
                const prompt = `${discussionState.figure1.prompt}
                
You are starting a thoughtful discussion. The question is: "${discussionState.currentQuestion}"

Give your perspective on this question in a CONCISE way (2-3 key points maximum). Be thoughtful and authentic to your historical viewpoint, but focus on your most important insights. Keep it under 150 words.`;
                
                const response = await callClaude(prompt);
                
                speakerDiv.innerHTML = `
                    <div class="speaker-name">${discussionState.figure1.name} (Opening Thoughts)</div>
                    <div class="speaker-content">${formatResponse(response)}</div>
                `;
                
                // Store for next speaker
                discussionState.firstResponse = response;
                
            } catch (error) {
                speakerDiv.innerHTML = `
                    <div class="speaker-name">${discussionState.figure1.name}</div>
                    <div>❌ Error: ${error.message}</div>
                `;
            }
        }
        
        async function getSecondResponse(container) {
            const speakerDiv = document.createElement('div');
            speakerDiv.className = 'speaker figure-2-speaker fade-in';
            speakerDiv.innerHTML = `
                <div class="speaker-name">${discussionState.figure2.name} (Response & Analysis)</div>
                <div><span class="loading"></span>Considering ${discussionState.figure1.name}'s thoughts...</div>
            `;
            container.appendChild(speakerDiv);
            
            try {
                const prompt = `${discussionState.figure2.prompt}
                
You are in a discussion with ${discussionState.figure1.name}. The question is: "${discussionState.currentQuestion}"

${discussionState.figure1.name} just shared their perspective:
"${discussionState.firstResponse}"

Now respond CONCISELY (under 150 words). Focus on:
1. Your key perspective on the question (1-2 main points)
2. One specific point where you agree with ${discussionState.figure1.name}
3. One specific point where you disagree or see things differently

Be direct and focused on your most important insights.`;
                
                const response = await callClaude(prompt);
                
                speakerDiv.innerHTML = `
                    <div class="speaker-name">${discussionState.figure2.name} (Response & Analysis)</div>
                    <div class="speaker-content">${formatResponse(response)}</div>
                `;
                
                // Store for follow-up
                discussionState.secondResponse = response;
                
            } catch (error) {
                speakerDiv.innerHTML = `
                    <div class="speaker-name">${discussionState.figure2.name}</div>
                    <div>❌ Error: ${error.message}</div>
                `;
            }
        }
        
        async function getFollowUpResponse(container) {
            const speakerDiv = document.createElement('div');
            speakerDiv.className = 'speaker figure-1-speaker fade-in';
            speakerDiv.innerHTML = `
                <div class="speaker-name">${discussionState.figure1.name} (Reflection & Reply)</div>
                <div><span class="loading"></span>Reflecting on ${discussionState.figure2.name}'s insights...</div>
            `;
            container.appendChild(speakerDiv);
            
            try {
                const prompt = `${discussionState.figure1.prompt}
                
You are continuing a discussion with ${discussionState.figure2.name} about: "${discussionState.currentQuestion}"

You initially said:
"${discussionState.firstResponse}"

${discussionState.figure2.name} then responded with:
"${discussionState.secondResponse}"

Now reflect CONCISELY (under 150 words) on ${discussionState.figure2.name}'s response. Focus on:
1. One key insight they shared that you find valuable
2. One point where you still disagree or see things differently
3. Any new thought their perspective sparked

Be direct and focused on your most important reactions.`;
                
                const response = await callClaude(prompt);
                
                speakerDiv.innerHTML = `
                    <div class="speaker-name">${discussionState.figure1.name} (Reflection & Reply)</div>
                    <div class="speaker-content">${formatResponse(response)}</div>
                `;
                
                // Store for moderation
                discussionState.thirdResponse = response;
                
            } catch (error) {
                speakerDiv.innerHTML = `
                    <div class="speaker-name">${discussionState.figure1.name}</div>
                    <div>❌ Error: ${error.message}</div>
                `;
            }
        }
        
        async function getModerationSummary(container) {
            const moderatorDiv = document.createElement('div');
            moderatorDiv.className = 'speaker moderator-speaker fade-in';
            moderatorDiv.innerHTML = `
                <div class="speaker-name">🎯 Discussion Insights</div>
                <div><span class="loading"></span>Analyzing the discussion...</div>
            `;
            container.appendChild(moderatorDiv);
            
            try {
                const prompt = `You are a modern AI moderator analyzing a thoughtful discussion between two brilliant figures.

Question discussed: "${discussionState.currentQuestion}"
Participants: ${discussionState.figure1.name} and ${discussionState.figure2.name}

Key points from the discussion:

${discussionState.figure1.name}'s initial perspective:
"${discussionState.firstResponse}"

${discussionState.figure2.name}'s response and analysis:
"${discussionState.secondResponse}"

${discussionState.figure1.name}'s reflection:
"${discussionState.thirdResponse}"

Provide a thoughtful summary using this exact format:

#### Key Insights
[The main insights that emerged from this discussion]

#### Areas of Agreement
[Where they found common ground]

#### Areas of Disagreement
[Where they had different perspectives]

#### What We Can Learn
[What readers can take away from their different perspectives]

#### Synthesis
[Any new understanding that emerged from their exchange]

Keep each section concise but insightful. Use clear headings and organize your thoughts well.`;
                
                const response = await callClaude(prompt);
                
                moderatorDiv.innerHTML = `
                    <div class="speaker-name">🎯 Discussion Insights</div>
                    <div class="moderator-content">${formatModeratorResponse(response)}</div>
                `;
                
            } catch (error) {
                moderatorDiv.innerHTML = `
                    <div class="speaker-name">AI Moderator</div>
                    <div>❌ Error generating summary: ${error.message}</div>
                `;
            }
        }
        
        async function callClaude(prompt) {
            const response = await fetch('/api/claude', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message: prompt,
                    figure: 'discussion'
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`API Error: ${response.status} - ${errorData.error || 'Unknown error'}`);
            }
            
            const data = await response.json();
            return data.content[0].text;
        }
        
        function showQuestionInput() {
            document.getElementById('questionSection').style.display = 'block';
            document.getElementById('questionInput').value = '';
            document.getElementById('discussionControls').style.display = 'none';
        }
        
        async function continueDiscussion() {
            // Implementation for continuing discussions...
            alert('Continue discussion feature - this would extend the conversation with more rounds!');
        }
        
        function resetDiscussion() {
            document.getElementById('setupSection').style.display = 'block';
            document.getElementById('participantsDisplay').style.display = 'none';
            document.getElementById('questionSection').style.display = 'none';
            document.getElementById('discussionArena').style.display = 'none';
            document.getElementById('discussionControls').style.display = 'none';
            document.getElementById('directChatSection').style.display = 'none';
            document.getElementById('discussionArena').innerHTML = '';
        }
        
        function showDirectChatOptions() {
            document.getElementById('directChatSection').style.display = 'block';
            
            const figureButtons = document.getElementById('figureButtons');
            figureButtons.innerHTML = `
                <button class="figure-chat-button" onclick="startDirectChat('${discussionState.figure1.name}')">
                    Chat with ${discussionState.figure1.name}
                </button>
                <button class="figure-chat-button" onclick="startDirectChat('${discussionState.figure2.name}')">
                    Chat with ${discussionState.figure2.name}
                </button>
            `;
        }
        
        function startDirectChat(figureName) {
            localStorage.setItem('selectedFigureName', figureName);
            localStorage.setItem('fromDiscussion', 'true');
            
            const presetFigure = Object.values(figures).find(f => f.name === figureName);
            if (presetFigure) {
                const figureId = Object.keys(figures).find(key => figures[key].name === figureName);
                localStorage.setItem('selectedFigure', figureId);
            } else {
                localStorage.setItem('selectedFigure', 'custom');
                localStorage.setItem('customFigureName', figureName);
            }
            
            window.location.href = 'chat.html';
        }
        
        function formatModeratorResponse(response) {
            let formatted = response.replace(/####\s+([^\n]+)/g, '<h4>$1</h4>');
            let paragraphs = formatted.split('\n\n').filter(p => p.trim());
            
            return paragraphs.map(p => {
                if (p.includes('<h4>')) {
                    return p;
                } else {
                    return `<p>${p.trim()}</p>`;
                }
            }).join('');
        }
        
        function formatResponse(response) {
            if (!response || response.length < 100) {
                return `<p>${response}</p>`;
            }
            
            let sentences = response.split(/(?<=[.!?])\s+/);
            let paragraphs = [];
            let currentParagraph = [];
            
            for (let i = 0; i < sentences.length; i++) {
                currentParagraph.push(sentences[i]);
                
                if (currentParagraph.length >= 2 && 
                    (sentences[i].includes('However') || 
                     sentences[i].includes('Furthermore') || 
                     sentences[i].includes('Moreover') || 
                     sentences[i].includes('In contrast') ||
                     sentences[i].includes('On the other hand') ||
                     sentences[i].includes('That said') ||
                     currentParagraph.length >= 3)) {
                    
                    paragraphs.push(currentParagraph.join(' '));
                    currentParagraph = [];
                }
            }
            
            if (currentParagraph.length > 0) {
                paragraphs.push(currentParagraph.join(' '));
            }
            
            if (paragraphs.length === 1 && sentences.length > 4) {
                const midPoint = Math.ceil(sentences.length / 2);
                paragraphs = [
                    sentences.slice(0, midPoint).join(' '),
                    sentences.slice(midPoint).join(' ')
                ];
            }
            
            return paragraphs.map(p => `<p>${p.trim()}</p>`).join('');
        }
    </script>
</body>
</html>

<!-- Enhanced Features Script -->
<script>
// Add this JavaScript to your existing index.html (append to the existing script section)

// Discussion Branching System
let discussionBranches = [];
let currentBranch = 0;

// Enhanced discussion state with template support
let discussionState = {
    figure1: null,
    figure2: null,
    currentQuestion: '',
    isExtended: false,
    currentContainer: null,
    figure1Mode: 'preset',
    figure2Mode: 'preset',
    template: null,
    branches: [],
    analytics: {
        startTime: null,
        messageCount: 0,
        topicChanges: 0,
        mostEngagingPoints: []
    }
};

// Check for template on page load
window.addEventListener('load', function() {
    checkForTemplate();
    initializeAnalytics();
});

function checkForTemplate() {
    const urlParams = new URLSearchParams(window.location.search);
    const templateData = localStorage.getItem('selectedTemplate');
    
    if (urlParams.get('template') && templateData) {
        const template = JSON.parse(templateData);
        applyTemplate(template);
        localStorage.removeItem('selectedTemplate'); // Clean up
    }
}

function applyTemplate(template) {
    discussionState.template = template;
    
    // Auto-fill question
    document.getElementById('questionInput').value = template.question;
    
    // Try to auto-select figures if they exist in our preset list
    if (template.suggestedFigures && template.suggestedFigures.length >= 2) {
        const figure1Id = template.suggestedFigures[0];
        const figure2Id = template.suggestedFigures[1];
        
        // Check if these figures exist in our dropdown
        const figure1Select = document.getElementById('figure1');
        const figure2Select = document.getElementById('figure2');
        
        if (figurExists(figure1Id)) {
            figure1Select.value = figure1Id;
        } else {
            // Use custom input
            toggleMode(1, 'custom');
            document.getElementById('figure1Custom').value = template.suggestedFigures[0];
        }
        
        if (figurExists(figure2Id)) {
            figure2Select.value = figure2Id;
        } else {
            // Use custom input
            toggleMode(2, 'custom');
            document.getElementById('figure2Custom').value = template.suggestedFigures[1];
        }
    }
    
    // Add template context banner
    if (template.context) {
        addTemplateBanner(template);
    }
    
    // Auto-start discussion if it's a scenario
    if (template.scenario) {
        setTimeout(() => {
            startDiscussion();
            setTimeout(() => {
                if (document.getElementById('questionInput').value) {
                    askQuestion();
                }
            }, 1000);
        }, 500);
    }
}

function figurExists(figureId) {
    const select = document.getElementById('figure1');
    for (let option of select.options) {
        if (option.value === figureId) return true;
    }
    return false;
}

function addTemplateBanner(template) {
    const banner = document.createElement('div');
    banner.className = 'template-banner';
    banner.style.cssText = `
        background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        border-left: 4px solid #ff9800;
        box-shadow: 0 4px 12px rgba(255, 152, 0, 0.15);
    `;
    
    banner.innerHTML = `
        <div style="display: flex; align-items: center; margin-bottom: 10px;">
            <span style="font-size: 1.5rem; margin-right: 10px;">🎯</span>
            <strong style="color: #e65100; font-size: 1.1rem;">${template.title}</strong>
        </div>
        <p style="color: #bf360c; line-height: 1.5; margin-bottom: 10px;">${template.context}</p>
        ${template.scenario ? '<p style="color: #f57c00; font-weight: 600; font-size: 0.9rem;">🎭 Interactive Scenario Mode</p>' : ''}
    `;
    
    const setupSection = document.getElementById('setupSection');
    setupSection.insertBefore(banner, setupSection.firstChild);
}

// Discussion Branching Functions
function addBranchingPoint(container, roundIndex, speakerIndex) {
    const branchButton = document.createElement('button');
    branchButton.className = 'branch-button';
    branchButton.style.cssText = `
        background: linear-gradient(135deg, #9c27b0 0%, #673ab7 100%);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.8rem;
        cursor: pointer;
        margin: 10px 0;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(156, 39, 176, 0.3);
    `;
    
    branchButton.innerHTML = '🌿 Ask follow-up question here';
    branchButton.onclick = () => openBranchDialog(roundIndex, speakerIndex);
    
    container.appendChild(branchButton);
}

function openBranchDialog(roundIndex, speakerIndex) {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    `;
    
    const dialog = document.createElement('div');
    dialog.style.cssText = `
        background: white;
        padding: 30px;
        border-radius: 20px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    `;
    
    dialog.innerHTML = `
        <h3 style="margin-bottom: 20px; color: #2c3e50;">🌿 Branch the Discussion</h3>
        <p style="color: #6c757d; margin-bottom: 20px; line-height: 1.6;">
            Ask a follow-up question to explore this point deeper or take the conversation in a new direction.
        </p>
        <textarea id="branchQuestion" placeholder="What follow-up question would you like to ask?" 
                  style="width: 100%; min-height: 100px; padding: 15px; border: 2px solid #e9ecef; border-radius: 10px; font-family: inherit; font-size: 16px; resize: vertical;"></textarea>
        <div style="display: flex; gap: 15px; margin-top: 20px; justify-content: flex-end;">
            <button onclick="closeBranchDialog()" style="padding: 12px 24px; border: 2px solid #6c757d; background: white; color: #6c757d; border-radius: 10px; cursor: pointer;">Cancel</button>
            <button onclick="createBranch(${roundIndex}, ${speakerIndex})" style="padding: 12px 24px; border: none; background: linear-gradient(135deg, #9c27b0 0%, #673ab7 100%); color: white; border-radius: 10px; cursor: pointer;">🚀 Create Branch</button>
        </div>
    `;
    
    modal.appendChild(dialog);
    document.body.appendChild(modal);
    
    // Focus the textarea
    setTimeout(() => {
        document.getElementById('branchQuestion').focus();
    }, 100);
    
    // Close on outside click
    modal.onclick = (e) => {
        if (e.target === modal) closeBranchDialog();
    };
    
    window.closeBranchDialog = () => {
        document.body.removeChild(modal);
    };
    
    window.createBranch = async (roundIndex, speakerIndex) => {
        const question = document.getElementById('branchQuestion').value.trim();
        if (!question) {
            alert('Please enter a question!');
            return;
        }
        
        closeBranchDialog();
        await handleBranchQuestion(question, roundIndex, speakerIndex);
    };
}

async function handleBranchQuestion(question, roundIndex, speakerIndex) {
    // Create a new branch in the discussion
    const branchContainer = document.createElement('div');
    branchContainer.className = 'discussion-branch';
    branchContainer.style.cssText = `
        margin: 30px 0;
        padding: 25px;
        background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
        border-radius: 20px;
        border-left: 6px solid #9c27b0;
        box-shadow: 0 8px 24px rgba(156, 39, 176, 0.15);
    `;
    
    branchContainer.innerHTML = `
        <div style="display: flex; align-items: center; margin-bottom: 15px;">
            <span style="font-size: 1.2rem; margin-right: 10px;">🌿</span>
            <strong style="color: #6a1b9a; font-size: 1.1rem;">Discussion Branch</strong>
        </div>
        <div class="branch-question" style="background: white; padding: 15px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #9c27b0;">
            <strong>Follow-up Question:</strong> "${question}"
        </div>
    `;
    
    // Insert the branch after the current discussion round
    const arena = document.getElementById('discussionArena');
    const rounds = arena.querySelectorAll('.discussion-round');
    if (rounds[roundIndex]) {
        rounds[roundIndex].appendChild(branchContainer);
    } else {
        arena.appendChild(branchContainer);
    }
    
    // Get responses from both figures
    await getBranchResponse(branchContainer, question, discussionState.figure1, 'figure-1-speaker');
    await getBranchResponse(branchContainer, question, discussionState.figure2, 'figure-2-speaker');
    
    // Update analytics
    discussionState.analytics.topicChanges++;
    
    // Scroll to the new branch
    branchContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

async function getBranchResponse(container, question, figure, speakerClass) {
    const speakerDiv = document.createElement('div');
    speakerDiv.className = `speaker ${speakerClass} fade-in`;
    speakerDiv.innerHTML = `
        <div class="speaker-name">${figure.name} (Branch Response)</div>
        <div><span class="loading"></span>Considering your follow-up question...</div>
    `;
    container.appendChild(speakerDiv);
    
    try {
        const conversationContext = getConversationContext();
        const prompt = `${figure.prompt}

You are continuing a discussion about: "${discussionState.currentQuestion}"

Previous conversation context:
${conversationContext.slice(-3).join('\n')}

Now someone has asked a follow-up question: "${question}"

Respond to this follow-up question CONCISELY (under 150 words). Build on the previous discussion while addressing this specific new angle. Be thoughtful and engage with both the original topic and this new direction.`;

        const response = await callClaude(prompt);
        
        speakerDiv.innerHTML = `
            <div class="speaker-name">${figure.name} (Branch Response)</div>
            <div class="speaker-content">${formatResponse(response)}</div>
        `;
        
        // Add another branching point
        addBranchingPoint(speakerDiv, 'branch', figure.name);
        
    } catch (error) {
        speakerDiv.innerHTML = `
            <div class="speaker-name">${figure.name}</div>
            <div>❌ Error: ${error.message}</div>
        `;
    }
}

function getConversationContext() {
    const context = [];
    if (discussionState.firstResponse) context.push(`${discussionState.figure1.name}: ${discussionState.firstResponse}`);
    if (discussionState.secondResponse) context.push(`${discussionState.figure2.name}: ${discussionState.secondResponse}`);
    if (discussionState.thirdResponse) context.push(`${discussionState.figure1.name}: ${discussionState.thirdResponse}`);
    return context;
}

// Enhanced askQuestion function with branching
const originalAskQuestion = window.askQuestion;
window.askQuestion = async function() {
    await originalAskQuestion();
    
    // Add branching points after each response
    setTimeout(() => {
        const speakers = document.querySelectorAll('.speaker:not(.moderator-speaker)');
        speakers.forEach((speaker, index) => {
            if (!speaker.querySelector('.branch-button')) {
                addBranchingPoint(speaker, 0, index);
            }
        });
    }, 2000);
};

// Analytics and Insights
function initializeAnalytics() {
    discussionState.analytics.startTime = new Date();
}

function updateAnalytics(event, data = {}) {
    const analytics = discussionState.analytics;
    
    switch(event) {
        case 'message_sent':
            analytics.messageCount++;
            break;
        case 'topic_changed':
            analytics.topicChanges++;
            break;
        case 'engaging_point':
            analytics.mostEngagingPoints.push({
                timestamp: new Date(),
                content: data.content,
                speaker: data.speaker
            });
            break;
    }
}

function generateAnalyticsReport() {
    const analytics = discussionState.analytics;
    const duration = new Date() - analytics.startTime;
    const minutes = Math.floor(duration / 60000);
    
    return {
        duration: `${minutes} minutes`,
        messageCount: analytics.messageCount,
        topicChanges: analytics.topicChanges,
        avgResponseTime: '~30 seconds', // Placeholder
        engagementLevel: analytics.messageCount > 6 ? 'High' : analytics.messageCount > 3 ? 'Medium' : 'Low'
    };
}

// Save & Share Functions
function saveDiscussion() {
    const discussionData = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        participants: [discussionState.figure1.name, discussionState.figure2.name],
        question: discussionState.currentQuestion,
        template: discussionState.template,
        content: document.getElementById('discussionArena').innerHTML,
        analytics: generateAnalyticsReport()
    };
    
    // Save to localStorage
    const savedDiscussions = JSON.parse(localStorage.getItem('savedDiscussions') || '[]');
    savedDiscussions.push(discussionData);
    localStorage.setItem('savedDiscussions', JSON.stringify(savedDiscussions));
    
    // Show success message
    showNotification('💾 Discussion saved successfully!', 'success');
    
    return discussionData.id;
}

function shareDiscussion() {
    const discussionId = saveDiscussion();
    
    // Create shareable URL (in a real app, this would be a backend endpoint)
    const shareUrl = `${window.location.origin}${window.location.pathname}?discussion=${discussionId}`;
    
    // Copy to clipboard
    navigator.clipboard.writeText(shareUrl).then(() => {
        showNotification('🔗 Share link copied to clipboard!', 'success');
    });
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'};
        color: white;
        border-radius: 10px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.2);
        z-index: 1000;
        font-weight: 600;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Add navigation link to topics page
document.addEventListener('DOMContentLoaded', function() {
    const navLinks = document.querySelector('.nav-links');
    if (navLinks) {
        const topicsLink = document.createElement('a');
        topicsLink.href = 'topics.html';
        topicsLink.textContent = '🎯 Discussion Templates';
        topicsLink.style.marginRight = '20px';
        navLinks.insertBefore(topicsLink, navLinks.firstChild);
    }
    
    // Add save/share buttons to discussion controls
    const controls = document.getElementById('discussionControls');
    if (controls) {
        const saveButton = document.createElement('button');
        saveButton.className = 'secondary-button';
        saveButton.innerHTML = '💾 Save Discussion';
        saveButton.onclick = saveDiscussion;
        
        const shareButton = document.createElement('button');
        shareButton.className = 'secondary-button';
        shareButton.innerHTML = '🔗 Share Discussion';
        shareButton.onclick = shareDiscussion;
        
        controls.appendChild(saveButton);
        controls.appendChild(shareButton);
    }
});
</script>
